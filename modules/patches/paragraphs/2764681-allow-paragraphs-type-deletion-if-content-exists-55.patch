diff --git a/src/Form/ParagraphsTypeDeleteConfirm.php b/src/Form/ParagraphsTypeDeleteConfirm.php
index f3749e2..c8d5dc8 100644
--- a/src/Form/ParagraphsTypeDeleteConfirm.php
+++ b/src/Form/ParagraphsTypeDeleteConfirm.php
@@ -4,6 +4,7 @@ namespace Drupal\paragraphs\Form;
 
 use Drupal\Core\Entity\EntityDeleteForm;
 use Drupal\Core\Form\FormStateInterface;
+use Drupal\paragraphs\Entity\Paragraph;
 
 /**
  * Provides a form for Paragraphs type deletion.
@@ -22,10 +23,47 @@ class ParagraphsTypeDeleteConfirm extends EntityDeleteForm {
       $caption = '<p>' . $this->formatPlural($num_paragraphs, '%type Paragraphs type is used by 1 piece of content on your site. You can not remove this %type Paragraphs type until you have removed all from the content.', '%type Paragraphs type is used by @count pieces of content on your site. You may not remove %type Paragraphs type until you have removed all from the content.', ['%type' => $this->entity->label()]) . '</p>';
       $form['#title'] = $this->getQuestion();
       $form['description'] = ['#markup' => $caption];
+
+      // Optional to delete existing entities.
+      $form['delete_entities'] = [
+        '#type' => 'submit',
+        '#submit' => [[$this, 'deleteExistingEntities']],
+        '#value' => $this->formatPlural($num_paragraphs, 'Delete existing entity', 'Delete all @count existing entities'),
+      ];
+
       return $form;
     }
 
     return parent::buildForm($form, $form_state);
   }
 
+  /**
+   * Delete existing entities submit.
+   *
+   * @param array $form
+   *   Form array.
+   * @param \Drupal\Core\Form\FormStateInterface $form_state
+   *   Form state.
+   *
+   * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
+   * @throws \Drupal\Core\Entity\EntityStorageException
+   */
+  public function deleteExistingEntities(array $form, FormStateInterface $form_state) {
+    $storage = $this->entityTypeManager->getStorage('paragraph');
+    $ids = $storage->getQuery()
+      ->condition('type', $this->entity->id())
+      ->execute();
+
+    if (!empty($ids)) {
+      $paragraphs = Paragraph::loadMultiple($ids);
+
+      // Delete existing entities.
+      $storage->delete($paragraphs);
+      drupal_set_message($this->formatPlural(count($paragraphs), 'Entity is successfully deleted', 'All @count entities are successfully deleted'));
+    }
+
+    // Set form to rebuild.
+    $form_state->setRebuild();
+  }
+
 }
