{#
/**
 * @file
 * Default theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
    paragraph_hero ? 'with-hero'
  ]
%}
{{ attach_library('classy/node') }}

<article{{ attributes.addClass(classes) }}>
  {{ title_prefix }}
  {% if not page %}
    <h2{{ title_attributes }}>
      <a href="{{ url }}" rel="bookmark">{{ label }}</a>
    </h2>
  {% endif %}
  {{ title_suffix }}

  	<div class="inner node-career__header">

  		<div class="node-career__column">

			{% if display_submitted %}
			<footer class="node__meta">
			  <div class="node-career__header-field" {{ author_attributes.addClass('node__submitted') }}>
			  	<i class="fa fa-calendar node-career__submitted-icon"></i>
			    {% trans %}Submitted on {{ date }}{% endtrans %}
			    {{ metadata }}
			  </div>
			</footer>
			{% endif %}

			<div class="node-career__header-field" {{ author_attributes.addClass('node__submitted') }}>
				<i class="fa fa-building node-career__submitted-icon"></i>
			  	<span class="node-career__header-field-title">Department:</span> {{ node.field_career_department.entity.name.value }}

			</div>

			<div class="node-career__header-field" {{ author_attributes.addClass('node__submitted') }}>
				<i class="fa fa-server node-career__submitted-icon"></i>
			  	<span class="node-career__header-field-title">Type:</span> {{ node.field_career_type.value }}
			</div>

			<div class="node-career__header-field" {{ author_attributes.addClass('node__submitted') }}>
				<i class="fa fa-sitemap node-career__submitted-icon"></i>
			  	<span class="node-career__header-field-title">Experience:</span> {{ node.field_career_experience.value }}
			</div>
		</div>

		<div class="node-career__column">
			<div class="node-career__apply-button">
				<a class="btn--secondary" href="#block-careerjobposting" onclick="PresentPostingForm();">Apply</a>
			</div>	
		</div>
	</div>	
	
	<div class="inner node-career__detail">	
		
		<div>
		  <div>
		    <div class="node-career__detail-text">{{ node.body.value | raw}}</div>

			<div class="node-career__detail-section">Responsibilities:</div>
			<ul>
				{% for x in 0..node.field_responsability | length - 1 %}
					<li class="node-career__detail-text">{{ node.field_responsability[x].value }}</li>
				{% endfor %}
			</ul>
			
			<div class="node-career__detail-section">Basic Qualifications</div>
			<ul>
				{% for x in 0..node.field_basic_qualification | length - 1 %}
					<li class="node-career__detail-text">{{ node.field_basic_qualification[x].value }}</li>
				{% endfor %}
			</ul>

			<div class="node-career__detail-section">Preferred Qualifications</div>
			<ul>
				{% for x in 0..node.field_preferred_qualification | length - 1 %}
					<li class="node-career__detail-text">{{ node.field_preferred_qualification[x].value }}</li>
				{% endfor %}
			</ul>
		  </div>
		</div>		
		
		<div class="text-align-center">
			<a class="btn--secondary text-align-center" href="#block-careerjobposting" onclick="PresentPostingForm();">Apply</a>
		</div>
	</div>

</article>

<script>
	window.onload = function() {
	  document.getElementById("block-careerjobposting").style.display = 'none';
	};

	function PresentPostingForm(){
		document.getElementById("block-careerjobposting").style.display = 'block';
		document.getElementsByName("position_name")[0].value = "{{ node.title.value }}";
	};
	
</script>