{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    node.isPromoted() ? 'node--promoted',
    node.isSticky() ? 'node--sticky',
    not node.isPublished() ? 'node--unpublished',
    view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
    paragraph_hero ? 'with-hero'
  ]
%}
{{ attach_library('classy/node') }}
<article{{ attributes.addClass(classes) }}>

  {{ title_prefix }}
  {% if not page and view_mode != teaser %}
    <h2{{ title_attributes }}>
      <a href="{{ url }}" rel="bookmark">{{ label }}</a>
    </h2>
  {% endif %}
  {{ title_suffix }}

  {% if display_submitted %}
    <footer class="node__meta">
      {{ author_picture }}
      <div{{ author_attributes.addClass('node__submitted') }}>
        {% trans %}Submitted by {{ author_name }} on {{ date }}{% endtrans %}
        {{ metadata }}
      </div>
    </footer>
  {% endif %}

  <div{{ content_attributes.addClass('node__content') }}>

    {% if view_mode == teaser %}

      {{ content.field_image }}
      <h3 class="node--type-store__title">{{ node.field_city.value }}</h3>

      <div class="node--type-store__address">
        {{ node.field_address.value }}<br>
        {{ node.field_city.value }}, {{ node.field_state.value }} {{ node.field_postal_code.value }}
      </div>

      <div class="node--type-store__phone"><i class="fa fa-phone"></i> {{ node.field_phone_number.value }}</div>
      <div class="node--type-store__email"><a href="mailto:{{ node.field_email.value }}"><i class="fa fa-envelope"></i> {{ node.field_email.value }}</a></div>

      {{ content.field_address }}

    {% elseif page %}
      <div class="node--type-store__column-first">
        <h1 class="page-title">{{ node.title.value }}</h1>
        {{ content.body }}
      </div>
      <div class="node--type-store__column-last">
        {{ content.field_image }}
        <h3 class="node--type-store__title">{{ node.field_city.value }}</h3>

        <div class="node--type-store__address">
          {{ node.field_address.value }}<br>
          {{ node.field_city.value }}, {{ node.field_state.value }} {{ node.field_postal_code.value }}
        </div>

        <div class="node--type-store__phone"><i class="fa fa-phone"></i> {{ node.field_phone_number.value }}</div>
        <div class="node--type-store__email"><a href="mailto:{{ node.field_email.value }}"><i class="fa fa-envelope"></i> {{ node.field_email.value }}</a></div>

        <div id="interactivemap" class="interactivemap view-contact-map__store-interactive-map view-contact-map__store-separator"></div>

        <script>

          // Function to present the map in the screen
          function initMap() {

            var map;           // Map that will be presented in the screen

            var latitude;        // Latitude to place the maker of the store in the map
            var longitude;       // Longitude to place the maker of the store in the map
            var myLatLng;        // Variable use to place the maker with the Latitude and Longitude

            // Sets the Latitude and Longitude of the store
            latitude = {{ node.field_latitude_coordinate.value }};
            longitude = {{ node.field_longitude_coordinate.value }};
            myLatLng = {lat: latitude, lng: longitude};

            // Creates the Map, centering to USA
            map = new google.maps.Map(document.getElementById('interactivemap'), {
                center: {lat: latitude, lng: longitude},
                zoom: 14
              });

            // Places in the map the market of the store
            var marker = new google.maps.Marker({
                position: myLatLng,
                map: map,
                title: ''
            });
          } 
        </script>

        <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD2u39WMMO1zdsOKgP45NaFssB868VkSJ0&callback=initMap" async defer></script>

      </div>
    {% else %}
      {{ content }}
    {% endif %}

  </div>

</article>
